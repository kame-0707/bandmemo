<!DOCTYPE html>
<html>
<head>
  <title>音声入力</title>
  <%= csrf_meta_tags %>
</head>
<body>
  <div class="text-center text-xl font-bold mt-10">①音声文字起こしで仮メモ作成</div>
  
  <div class="flex justify-center mt-4 mb-4">
    <div class="mr-4">
      <button class="btn btn-outline btn-secondary" id="start-record-btn">
        <div class="text-xs">録音開始</div>
       </button>
    </div>
    <div class="mr-4">
      <button class="btn btn-outline btn-secondary" id="stop-record-btn" disabled>
        <div class="text-xs">録音停止</div>
      </button>
    </div>
  </div>

  <div class="text-center text-sm mx-10">
    <div id="status">
      <p>「録音開始」ボタンをクリックして話し始めてください...</p>
      <p>※日本語のみに対応</p>
    </div>
    <div id="real-time-content"></div> <!-- リアルタイムの音声入力表示用 -->
  </div>

  <div class="text-center text-base font-bold mt-4 mb-4">音声文字起こし一覧</div>
  <div class="flex justify-center mt-4">
    <%= link_to new_summary_path do %>
      <div class="mr-4 mb-4">
        <button class="btn btn-secondary">
          <div class="text-xs">メモを要約・保存ページへ</div>
        </button>
      </div>
    <% end %>
  </div>
  
  <ul class="grid grid-cols-1 justify-items-center max-w-4xl mx-auto">
    <% if @voices.present? %>
      <% @voices.each do |voice| %>
        <li class="bg-white shadow-md rounded-lg p-4 w-5/6 max-w-md mb-4">
          <div class="flex justify-center mt-auto">
            <%= link_to edit_voice_path(voice) do %>
              <div class="mr-4">
                <button class="btn btn-outline btn-success">
                  <div class="text-xs">編集</div>
                </button>
              </div>
            <% end %>
            <%= link_to voice_path(voice), data: { turbo_method: :delete, turbo_confirm: "削除しますか" } do %>
              <div class="mr-4">
                <button class="btn btn-outline btn-error">
                  <div class="text-xs">削除</div>
                </button>
              </div>
            <% end %>
          </div>
          <div class="mt-2">
            <%= voice.content %>
          </div>
        </li>
      <% end %>
    <% else %>
      <div>音声文字起こしが見つかりません</div>
    <% end %>
  </ul>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
  <script>
    document.addEventListener("turbo:load", function() {
      const startButton = document.getElementById('start-record-btn');
      const stopButton = document.getElementById('stop-record-btn');
      const status = document.getElementById('status');
      const realTimeContent = document.getElementById('real-time-content');
      
      const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
      recognition.lang = 'ja-JP'; // 言語を日本語に設定
      recognition.interimResults = true; // 中間結果を取得

      let finalTranscript = ''; // 最終結果を保持する変数

      recognition.onstart = function() {
        status.textContent = '録音中...';
        startButton.disabled = true;
        stopButton.disabled = false;
      };

      recognition.onend = function() {
        status.textContent = '録音が停止されました';
        startButton.disabled = false;
        stopButton.disabled = true;
        saveVoiceContent(finalTranscript); // 最終結果を保存
      };

      recognition.onresult = function(event) {
        let interimTranscript = ''; // 中間結果を保持する変数

        for (let i = 0; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript;
          if (event.results[i].isFinal) {
            finalTranscript += transcript; // 最終結果に追加
          } else {
            interimTranscript += transcript; // 中間結果に追加
          }
        }
        
        realTimeContent.textContent = finalTranscript + interimTranscript; // リアルタイムの内容を表示
      };

      recognition.onerror = function(event) {
        status.textContent = `認識中にエラーが発生しました: ${event.error}`;
        startButton.disabled = false;
        stopButton.disabled = true;
      };

      startButton.addEventListener('click', function() {
        finalTranscript = ''; // 新しい録音のためにリセット
        recognition.start();
      });

      stopButton.addEventListener('click', function() {
        recognition.stop();
      });

      function saveVoiceContent(content) {
        $.ajax({
          url: '/voices',
          type: 'POST',
          data: { voice: { content: content } },
          headers: {
            'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content') },
          success: function(response) {
            console.log('音声コンテンツが正常に保存されました');
            location.reload(); // ページを再読み込みして新しい内容を表示
          },
          error: function(response) {
            console.log('音声コンテンツの保存中にエラーが発生しました');
          }
        });
      }
    });
  </script>
</body>
</html>
